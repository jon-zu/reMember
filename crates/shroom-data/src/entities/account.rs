//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::GenderTy;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "account")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub username: String,
    pub password_hash: String,
    pub accepted_tos: bool,
    pub gender: Option<GenderTy>,
    pub last_login_at: Option<DateTime>,
    pub created_at: DateTime,
    pub pin: Option<String>,
    pub pic: Option<String>,
    pub country: i32,
    pub gm_level: i32,
    pub last_selected_world: i32,
    pub character_slots: i32,
    pub nx_credit: i32,
    pub nx_prepaid: i32,
    pub shroom_points: i32,
    pub tester: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::ban::Entity")]
    Ban,
    #[sea_orm(has_many = "super::character::Entity")]
    Character,
}

impl Related<super::ban::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ban.def()
    }
}

impl Related<super::character::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Character.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
